{{ define "saved.tmpl" }}
<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>{{ .Title }}</title>
	<style>
		:root {
			color-scheme: light dark;
			--bg: #f8fafc;
			--fg: #0f172a;
			--accent: #0f766e;
			--accent-alt: #2563eb;
			--muted: #64748b;
		}
		:root[data-theme="dark"] {
			--bg: #0f172a;
			--fg: #e2e8f0;
			--accent: #5eead4;
			--accent-alt: #8da2c9;
			--muted: #9ca3af;
		}
		body { font-family: "Inter", system-ui, sans-serif; max-width: 680px; margin: 4rem auto; padding: 0 1.75rem 4rem; text-align: center; background: var(--bg); color: var(--fg); transition: background .3s ease, color .3s ease; position: relative; }
		.links { display: flex; justify-content: center; gap: 0.75rem; flex-wrap: wrap; margin-top: 1.6rem; }
		.links a, .links button { display: inline-flex; align-items: center; gap: 0.4rem; padding: 0.85rem 1.4rem; border-radius: 999px; text-decoration: none; color: #fff; box-shadow: 0 12px 32px rgba(15, 23, 42, 0.18); transition: transform .15s ease, box-shadow .2s ease; font-weight: 600; font-size: 1rem; }
		.links a:hover, .links button:hover { transform: translateY(-1px); box-shadow: 0 14px 38px rgba(15, 23, 42, 0.22); }
		.links a { border: none; }
		.links button { border: none; cursor: pointer; font-family: inherit; }
		.links button:disabled { opacity: 0.6; cursor: default; }
		.links a.view { background: var(--accent); }
		.links a.secondary { background: var(--accent-alt); }
		.links button.share { background: var(--muted); color: #fff; }
		.meta { color: var(--muted); margin-top: 1.25rem; font-size: 0.95rem; }
		.url-card { margin: 1.9rem auto 0; padding: 1.25rem 1.4rem; border-radius: 16px; border: 1px solid rgba(148, 163, 184, 0.3); background: rgba(255, 255, 255, 0.6); color: inherit; text-align: left; max-width: 520px; box-shadow: 0 16px 34px rgba(15, 23, 42, 0.1); }
		:root[data-theme="dark"] .url-card { background: rgba(17, 24, 39, 0.75); border-color: rgba(148, 163, 184, 0.25); }
		.url-item { display: flex; flex-direction: column; gap: 0.35rem; margin-bottom: 1rem; }
		.url-item:last-child { margin-bottom: 0; }
		.url-item span { font-size: 0.85rem; color: var(--muted); text-transform: uppercase; letter-spacing: 0.05em; }
		.url-item code { font-family: "Fira Code", monospace; font-size: 0.92rem; padding: 0.5rem 0.65rem; border-radius: 10px; background: rgba(15, 23, 42, 0.08); display: inline-block; color: inherit; }
		:root[data-theme="dark"] .url-item code { background: rgba(148, 163, 184, 0.16); }
		@media (max-width: 640px) {
			body { margin: 3rem auto; padding-bottom: 3rem; }
		}
	</style>
</head>
<body>
	<h1>{{ .Title }}</h1>
	<p>Your entry is ready.</p>
	{{ if .PublishedAt }}<div class="meta">Published at {{ .PublishedAt }}{{ if .WasUpdated }} Â· Last updated {{ .UpdatedAt }}{{ end }}</div>{{ end }}
	<div class="links">
		<a class="view" href="{{ .ViewURL }}" target="_blank" rel="noopener">View</a>
		<a class="secondary" href="{{ .EditURL }}" target="_blank" rel="noopener">Edit</a>
		<button type="button" class="share" id="share-link">Share</button>
	</div>
	<div class="url-card">
		<div class="url-item">
			<span>Public URL</span>
			<code>{{ .ViewURL }}</code>
		</div>
		<div class="url-item">
			<span>Edit URL</span>
			<code>{{ .EditURL }}</code>
		</div>
	</div>
	<script>
		(function () {
			const shareButton = document.getElementById('share-link');
			if (!shareButton) return;
			const originalText = shareButton.textContent;
			const copyToClipboard = async (text) => {
				if (navigator.clipboard && navigator.clipboard.writeText) {
					return navigator.clipboard.writeText(text);
				}
				return new Promise((resolve, reject) => {
					const textarea = document.createElement('textarea');
					textarea.value = text;
					textarea.setAttribute('readonly', '');
					textarea.style.position = 'fixed';
					textarea.style.top = '-9999px';
					document.body.appendChild(textarea);
					textarea.select();
					const success = document.execCommand('copy');
					document.body.removeChild(textarea);
					success ? resolve() : reject(new Error('copy failed'));
				});
			};
			shareButton.addEventListener('click', async () => {
				const url = new URL('{{ .ViewURL }}', window.location.origin).href;
				shareButton.disabled = true;
				try {
					await copyToClipboard(url);
					shareButton.textContent = 'Copied!';
				} catch (err) {
					shareButton.textContent = 'Copy failed';
				}
				setTimeout(() => {
					shareButton.textContent = originalText;
					shareButton.disabled = false;
				}, 2000);
			});
		})();
	</script>
</body>
</html>
{{ end }}
